@using VideoStreamingService.Data.ViewModels;

@model UserChannel;
@{
    ViewData["Title"] = Model.Name;
}

<div class="container-fluid my-4 mb-2">
    <div class="row">
		<div class="col-sm-10 col-md-8 col-lg-6 col-xl-6 mx-auto">
			<div class="d-flex align-items-center">
				<img src="data:image/jpeg;base64,@Model.Image" class="rounded-circle p-3 p-md-0 my-0 my-md-3 me-2 me-md-4" style="aspect-ratio: 1/1;max-height:128px;max-width:128px">
				<div>
					<ul class="navbar-nav flex-row flex-wrap bd-navbar-nav">
						<li class="nav-item col-auto me-3 mw-100">
							<div class="h4 crop-text-1">@Model.Name</div>
						</li>
						<li class="nav-item col-auto">
							@if (!Model.OwnChanel && !Model.Ignored)
							{
								<button id="subButton" onclick="changeSubscription()" class="btn btn-success mb-2" style="width:190px;">Подписаться</button>
							}
						</li>
					</ul>
					<p id="subCount" class="mb-2" title="@Model.LongSubsString()">@Model.SubsString()</p>

				</div>
				
			</div>
			
			@if (Model.OwnChanel)
			{
				<div class="d-flex mb-2" id="videoCheckboxes">
					@foreach (VideoVisibilityEnum item in Enum.GetValues(typeof(VideoVisibilityEnum)))
					{
						<div class="pb-2 pe-2">
							<input class="form-check-input" type="checkbox" value="@((int)item)" id="@item.ToString()" onclick="loadVideos()">
							<label class="form-check-label" for="@item.ToString()">@(item.GetEnumDisplayName())</label>
						</div>
					}
				</div>
			}
			
        </div>
    </div>

	<div id="_videos" class="mt-2">
		@await Html.PartialAsync("_Videos", Model.FeedVM)
	</div>
</div>

<script type="text/javascript">
	var subUrl = "/Subscribe/@(Model.Url)_@(Model.Subed)";
	var enums = "_@(VideoVisibilityEnum.Visible)";
	var enumsList = [];
	if (@Model.Subed.ToString().ToLower()) {
		subButtonToggle();
	};

	//window.onload = () => {
		//$('#_videos').load("" + enums)
		//loadVideos();
	//}


	function changeSubscription() {
		$.ajax({
			type: 'POST',
			url: subUrl,
			contentType: false,
			processData: false,
			success: function (subsCount) {
				if (subsCount<1000){
					var subCount = document.getElementById('subCount');
					subCount.textContent = subsCount + subsString(subsCount);
				}
				
			}
		});
		subButtonToggle();
	};

	function subsString(subsCount){
		switch (subsCount%10) {
			case 1: return " подписчик";
			case 2: 
			case 3: 
			case 4: 
				return " подписчика";
			default: return " подписчиков"
		};
	};

	function subButtonToggle() {
		var subButton = document.getElementById('subButton');
		subButton.classList.toggle("btn-success");
		subButton.classList.toggle("btn-outline-secondary");
		if (subButton.textContent == 'Подписаться') {
			subButton.textContent = 'Подписка оформлена';
            subButton.onmouseover = () =>{
                subButton.textContent = 'Отписаться';
            }
            subButton.onmouseout = () => {
                subButton.textContent = 'Подписка оформлена';
            }
			subUrl = "/Subscribe/@(Model.Url)_True";
		}
		else {
			subButton.textContent = 'Подписаться';
            subButton.onmouseout = null;
            subButton.onmouseover = null;
			subUrl = "/Subscribe/@(Model.Url)_False";
		}
	}
</script>



@if (Model.OwnChanel)
{
	<script type="text/javascript">
		window.onload = () => {
			loadEnumsList();
			@*loadEnums();*@
			@*$('#_videos').load("/GetVideos/@(Model.Url)" + enums)*@
		};

		function loadVideos() {
			loadEnums();
			$('#_videos').load("/GetVideos/@(Model.Url)" + enums)

			//var url = "/GetVideos/@(Model.Url)" + enums;
			//$.ajax({
			//	type: 'GET',
			//	url: url,
			//	contentType: false,
			//	processData: false,
			//	success: function (res) {
			//		$("#videos").html(res);
			//	}
			//});
		}
	
		function loadEnumsList() {
			@foreach (VideoVisibilityEnum item in Enum.GetValues(typeof(VideoVisibilityEnum)))
			{
				@:enumsList.push(document.getElementById('@item.ToString()'));
			}
			enumsList[0].checked = true;
		};
	
		function loadEnums() {
			enums = "";
			for (let i = 0; i < enumsList.length; i++) {
				if(enumsList[i].checked){
					enums += "_" + enumsList[i].id;
				}
			}
		};
	</script>
}


