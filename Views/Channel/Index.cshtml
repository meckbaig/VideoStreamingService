@using VideoStreamingService.Data.ViewModels;
@using VideoStreamingService.Data
@inject IAppConfig config;
@model UserChannel;
@{
    ViewData["Title"] = Model.Name;
}

<div class="container-fluid my-4 mb-2">
    <div class="row">
		<div class="col-sm-10 col-md-8 col-lg-6 col-xl-6 mx-auto">
			<div class="d-flex align-items-center">
				<img src="data:image/jpeg;base64,@Model.Image" class="rounded-circle p-3 p-md-0 my-0 my-md-3 me-2 me-md-4" style="aspect-ratio: 1/1;max-height:128px;max-width:128px">
				<div>
					<ul class="navbar-nav flex-row flex-wrap bd-navbar-nav">
						<li class="nav-item col-auto me-3 mw-100">
							<div class="h4 crop-text-1">@Model.Name</div>
						</li>
						<li class="nav-item col-auto">
							@if (!Model.OwnChanel && !Model.Ignored)
							{
								<button  channelUrl="@Model.Url" subed="@Model.Subed.ToString().ToLower()" 
                                class="btn btn-success sub-btn mb-2" style="width:190px;">Подписаться</button>
							}
						</li>
					</ul>
					<p id="subCount_@Model.Url" class="mb-2" title="@Model.LongSubsString()">@Model.SubsString()</p>
				</div>
			</div>
			
			@if (Model.OwnChanel)
			{
				<div class="d-flex mb-2" id="videoCheckboxes">
					@foreach (VideoVisibilityEnum item in Enum.GetValues(typeof(VideoVisibilityEnum)))
					{
						<div class="pb-2 pe-2">
							<input class="form-check-input" type="checkbox" value="@((int)item)" id="@item.ToString()" onclick="reloadVideos()">
							<label class="form-check-label" for="@item.ToString()">@(item.GetEnumDisplayName())</label>
						</div>
					}
				</div>
			}
        </div>
    </div>
	<div id="videosContainer" class="mt-2 row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 row-cols-xxl-6">
	</div>
</div>

<script src="~/js/videosOnScroll.js"></script>
<script src="~/js/subscription.js"></script>
<script type="text/javascript">
	VisibilitiesArr = ['@(VideoVisibilityEnum.Visible)'];
    MaxVideoPages = @config.MaxVideoPages;
    FeedType = "@Model.FeedVM.FeedType.ToString()";
		window.onload = () => {
			refreshPagesFrom(1);
		};
	ChannelUrl = '@Model.Url';
</script>
@if (Model.OwnChanel)
{
	<script type="text/javascript">
		let checkBoxes = [];
		
		window.onload = () => {
			loadCheckBoxes();
			refreshPagesFrom(1);
		};
		
		function loadCheckBoxes() {
			@foreach (VideoVisibilityEnum item in Enum.GetValues(typeof(VideoVisibilityEnum)))
			{
				@:checkBoxes.push(document.getElementById('@item.ToString()'));
			}
			checkBoxes[0].checked = true;
			loadEnums();
		}
		
		function loadEnums() {
			VisibilitiesArr = [];
			for (let i = 0; i < checkBoxes.length; i++) {
				if(checkBoxes[i].checked){
					VisibilitiesArr.push(checkBoxes[i].id);
				}
			}
		}
		
		function reloadVideos() {
			loadEnums();
			document.getElementById('videosContainer').innerHTML = '';
			refreshPagesFrom(1);
		}
	</script>
}
