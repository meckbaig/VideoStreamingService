@using System.IO;
@using VideoStreamingService.Data.ViewModels;
@using VideoStreamingService.Models;
@model VideoVM;
@{
	ViewData["Title"] = Model.Video.Title;
}

    <link rel="stylesheet" href="~/vime/themes/default.css" />
	<script defer type="module" src="~/vime/dist/vime/vime.esm.js"></script>

<div class="row">
	<div class="d-flex flex-column align-items-center">
		<div id="container" class="col-12 col-md-10 col-lg-9 col-xl-8">
			<vm-player id="videoContainer" autoplay autopause="false">
				<vm-video id="videoPlayer" cross-origin="true" poster="/Videos/@Model.Video.Url/@(Model.Video.Thumbnail).jpg">
						<source id="videoSource" data-src='/api/FileApi/GetVideo?url=@(Model.Video.Url)' type="video/mp4" />
					</vm-video>
					<vm-ui>
						<vm-scrim gradient="up"></vm-scrim>
						<vm-click-to-play></vm-click-to-play>
						<vm-dbl-click-fullscreen useOnMobile="true"></vm-dbl-click-fullscreen>
						<vm-captions></vm-captions>
						<vm-poster></vm-poster>
						<vm-spinner></vm-spinner>
						<vm-default-settings></vm-default-settings>
						<vm-controls pin="bottomLeft" active-duration="2000" full-width>
							<vm-control-group style="margin-bottom:5px">
								<vm-scrubber-control></vm-scrubber-control>
							</vm-control-group>
							<!--
							  These are all predefined controls that you can easily customize. You could also build
							  your own controls completely from scratch.
							-->
							<vm-control-group>
								<vm-playback-control id="playback-control" tooltip-direction="right"></vm-playback-control>
								<vm-volume-control></vm-volume-control>
								<vm-time-progress></vm-time-progress>
								<vm-control-spacer></vm-control-spacer>
								<vm-caption-control></vm-caption-control>
								@*<vm-control label="Wide screen" pressed="false" onclick="$(document.getElementById('videoContainer')).toggleClass('mx-auto col-8 col-12 mx-1')">*@
								<vm-pip-control keys="p"></vm-pip-control>
								<vm-settings-control></vm-settings-control>
								<vm-control label="Wide screen" keys="KeyW" pressed="false" onclick="wideVideo()">
									<vm-icon src="/arrowsWide.svg"></vm-icon>
									<vm-tooltip>Wide screen</vm-tooltip>
								</vm-control>
								<vm-fullscreen-control tooltip-direction="left"></vm-fullscreen-control>
							</vm-control-group>
						</vm-controls>
						<vm-settings>
							<vm-submenu label="Качество" id="submenuQuality" hint="@(Model.Video.ResolutionString)">
								<vm-menu-radio-group value="@Model.Resolutions[0]" id="videoQuality">
									@{
										foreach (int res in Model.Resolutions)
										{
											<vm-menu-radio label="@(res)p" value="@res"></vm-menu-radio>
										}
									}
								</vm-menu-radio-group>
							</vm-submenu>
							<vm-submenu label="Скорость воспроизведения" id="submenuSpeed" hint="Стандартная">
								<vm-menu-radio-group value="1" id="videoSpeed">
									<vm-menu-radio label="x0.25" value="0.25"></vm-menu-radio>
									<vm-menu-radio label="x0.5" value="0.5"></vm-menu-radio>
									<vm-menu-radio label="x0.75" value="0.75"></vm-menu-radio>
									<vm-menu-radio label="Стандартная" value="1"></vm-menu-radio>
									<vm-menu-radio label="x1.25" value="1.25"></vm-menu-radio>
									<vm-menu-radio label="x1.5" value="1.5"></vm-menu-radio>
									<vm-menu-radio label="x1.75" value="1.75"></vm-menu-radio>
									<vm-menu-radio label="x2" value="2"></vm-menu-radio>
								</vm-menu-radio-group>
							</vm-submenu>
						</vm-settings>
					</vm-ui>
				</vm-player>
			<div class="d-flex mt-2 flex-nowrap">
				<p class="h4">@Model.Video.Title</p>
				<div class="d-flex flex-column ms-auto">
					<p class="m-0 text-end text-body-secondary fw-medium text-nowrap" title="@Model.Video.LongViewsString()">@Model.Video.ViewsString()</p>
					<p class="m-0 text-end text-body-secondary text-nowrap"
					   title="@(Model.Video.UploadDateString) @(Model.Video.Uploaded.ToString("t"))">
						@Model.Video.UploadDateString
					</p>
				</div>
			</div>
			<div class="d-flex align-items-center">
				<div class="d-flex align-items-center mb-2">
					<a href="~/@Model.Video.User.Url">
						<img src="data:image/jpeg;base64,@Model.Video.User.Image" class="rounded-circle p-2 p-md-0 my-0 my-md-2 me-md-3"
							 style="aspect-ratio: 1/1;max-height:64px;max-width:64px">
					</a>
					<div>
						<a class="h4 text-decoration-none" href="~/@Model.Video.User.Url">@Model.Video.User.Name</a>
						<p id="subCount" class="mb-1" title="@Model.Video.LongSubsString()">@Model.Video.SubsString()</p>
					</div>
				</div>
				<div class="ms-auto">
					<input type="checkbox" class="btn-check" id="likeButton" value="1" autocomplete="off" onclick="reaction(event, 'dislikeButton')">
					<label class="btn btn-outline-primary" for="likeButton"
						   data-bs-toggle="tooltip" data-bs-placement="bottom" title="@Model.Video.Reactions.Where(r=>r.Like==true).Count() лайков">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-up-fill mb-1" viewBox="0 0 16 16">
							<path d="M6.956 1.745C7.021.81 7.908.087 8.864.325l.261.066c.463.116.874.456 1.012.965.22.816.533 2.511.062 4.51a9.84 9.84 0 0 1 .443-.051c.713-.065 1.669-.072 2.516.21.518.173.994.681 1.2 1.273.184.532.16 1.162-.234 1.733.058.119.103.242.138.363.077.27.113.567.113.856 0 .289-.036.586-.113.856-.039.135-.09.273-.16.404.169.387.107.819-.003 1.148a3.163 3.163 0 0 1-.488.901c.054.152.076.312.076.465 0 .305-.089.625-.253.912C13.1 15.522 12.437 16 11.5 16H8c-.605 0-1.07-.081-1.466-.218a4.82 4.82 0 0 1-.97-.484l-.048-.03c-.504-.307-.999-.609-2.068-.722C2.682 14.464 2 13.846 2 13V9c0-.85.685-1.432 1.357-1.615.849-.232 1.574-.787 2.132-1.41.56-.627.914-1.28 1.039-1.639.199-.575.356-1.539.428-2.59z" />
						</svg>
						Лайк
					</label>
				</div>
				<div class="ms-2">
					<input type="checkbox" class="btn-check" id="dislikeButton" value="0" autocomplete="off" onclick="reaction(event, 'likeButton')">
					<label class="btn btn-outline-danger" for="dislikeButton"
						   data-bs-toggle="tooltip" data-bs-placement="bottom" title="@Model.Video.Reactions.Where(r=>r.Like==false).Count() дизлайков">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-down-fill" viewBox="0 0 16 16">
							<path d="M6.956 14.534c.065.936.952 1.659 1.908 1.42l.261-.065a1.378 1.378 0 0 0 1.012-.965c.22-.816.533-2.512.062-4.51.136.02.285.037.443.051.713.065 1.669.071 2.516-.211.518-.173.994-.68 1.2-1.272a1.896 1.896 0 0 0-.234-1.734c.058-.118.103-.242.138-.362.077-.27.113-.568.113-.856 0-.29-.036-.586-.113-.857a2.094 2.094 0 0 0-.16-.403c.169-.387.107-.82-.003-1.149a3.162 3.162 0 0 0-.488-.9c.054-.153.076-.313.076-.465a1.86 1.86 0 0 0-.253-.912C13.1.757 12.437.28 11.5.28H8c-.605 0-1.07.08-1.466.217a4.823 4.823 0 0 0-.97.485l-.048.029c-.504.308-.999.61-2.068.723C2.682 1.815 2 2.434 2 3.279v4c0 .851.685 1.433 1.357 1.616.849.232 1.574.787 2.132 1.41.56.626.914 1.28 1.039 1.638.199.575.356 1.54.428 2.591z" />
						</svg>
						Дизайк
					</label>
				</div>
			</div>
			<div class="form-floating position-relative mb-2">
				<textarea class="form-control" id="descriptionArea"
						  style="max-height: 100px;" disabled>@Model.Video.Description</textarea>
				<label for="descriptionArea">Описание</label>
				<a for="descriptionArea" style="cursor: pointer" onclick="textareaOnClick()" id="textareaShow"
				   class="pe-2 position-absolute bottom-0 end-0 h6 text-decoration-none">
					Показать
				</a>
			</div>
			@if (User.Identity.IsAuthenticated)
			{
				<div class="d-flex mb-2">
					<textarea class="form-control w-100 me-2" id="messageTextarea" 
						placeholder="Оставьте свой комментарий" maxlength="500"></textarea>
					<button class="btn btn-secondary flex-shrink-1 align-items-start"
						onclick="sendComment()" style="max-height:40px">Отправить</button>
				</div>
			}
			<div id="comments">
				@foreach(Comment c in Model.Video.Comments)
				{
					@await Html.PartialAsync("_Comment", c)
				}
			</div>
		</div>
	</div>
</div>

@if (Model.Video.Like != null)
{

	<script type="text/javascript">
		if (@Model.Video.Like.ToString().ToLower()) {
			document.getElementById("likeButton").checked = true;
		}
		if (@((!Model.Video.Like).ToString().ToLower())){
			document.getElementById("dislikeButton").checked = true;
		}
	</script>
}

<script type="text/javascript">
	var wideVideoBool = @(TempData["WideVideo"]?.ToString()?.ToLower() ?? "false")
	const container = document.getElementById('container');
	const player = document.getElementById('videoContainer');
	const submenuQuality = document.getElementById('submenuQuality');
	const radioGroupQuality = document.getElementById('videoQuality');
	const submenuSpeed = document.getElementById('submenuSpeed');
	const radioGroupSpeed = document.getElementById('videoSpeed')
	var time = player.currentTime;

	function sendComment() {
		if ($("#messageTextarea").val().replace(/\s/g, '') != "") {
			$.ajax({
				type: "POST",
				url: '/Video/SendComment',
				data: JSON.stringify({ url: '@Model.Video.Url', message: $("#messageTextarea").val() }),
				cache: false,
				contentType: "application/json",
				processData: false,
				success: function (comment) {
					$("#comments").prepend(comment);
					refreshTextareaInput();
					document.getElementById('messageTextarea').value = '';
				},
			});
		}
	}

	player.addEventListener('vmReady', event => {
		countView();
		if (wideVideoBool) {
			wideVideo();
			wideVideoBool = !wideVideoBool;
		}
		resizeVideo();
	});

	window.onresize = () => {
		resizeVideo();
	}

	window.onbeforeunload = () => {
		$.ajax({
			type: "POST",
			url: '/Video/SaveScreenWidth',
			data: JSON.stringify({ wvBool: wideVideoBool.toString() }),
			cache: false,
			contentType: "application/json",
			processData: false,
		})
	}

	// ресайз для textarea 
	function textareaOnClick(){
		var descriptionArea = document.getElementById("descriptionArea");
		if (descriptionArea.style.maxHeight != "100px"){
			document.getElementById("textareaShow").textContent = "Показать";
			descriptionArea.style.maxHeight = "100px";
		}
		else {
			document.getElementById("textareaShow").textContent = "Скрыть";
			descriptionArea.style.maxHeight = null;
		}
	}

	function reaction(event, counterId) {
		document.getElementById(counterId).checked = false;
		var doneUndone = event.currentTarget.checked;
		$.ajax({
			url: "/Video/Reaction/",
			type: "POST",
			data: JSON.stringify({ Url: "@Model.Video.Url", Reaction: event.currentTarget.value, DoneUndone: doneUndone }),
			cache: false,
			contentType: "application/json",
			processData: false,
		})
		
	}

	function wideVideo(){
		$(document.getElementById('container')).toggleClass('col-xl-8 col-lg-9 col-md-10 w-100');
		wideVideoBool = !wideVideoBool;
		resizeVideo(); 
		//$.ajax({
		//	type: "POST",
		//	url: '/Video/SetTempData',
		//	data: JSON.stringify({ wvBool: wideVideoBool }),
		//	cache: false,
		//	contentType: "application/json",
		//	processData: false,
		//})
	}


	function resizeVideo() {
		if (wideVideoBool) {
			var vidHeight = window.innerHeight - document.getElementById('header').offsetHeight - 28;
		}
		else{
			var vidHeight = window.innerHeight * 0.9 - document.getElementById('header').offsetHeight - 130;
			if (window.innerHeight < 600){
				vidHeight = window.innerHeight - 20 - document.getElementById('header');
			}
		}
		
		//document.getElementById('videoPlayer').style.maxHeight = vidHeight + "px";
		var videoContainer = document.getElementById('videoContainer');
		var ar = videoContainer.aspectRatio;
		var arrayAr = ar.split(':');
		var vidWidth = vidHeight / arrayAr[1] * arrayAr[0];
		document.getElementById('container').style.maxWidth = vidWidth + "px";
	}


	async function countView() {
		await sleep(10000);
		$.ajax({
			url: "/Video/CountView",
			type: "POST",
			data: JSON.stringify({ Url: "@Model.Video.Url" }),
            cache: false,
            contentType: "application/json",
            processData: false,
		})
	}



	//window.addEventListener('keydown', function (event) {
	//	if (['Space'].includes(event.code)) {
	//		var sdfsd = document.getElementById("playback-control");
	//		var sdf = sdfsd.getElementsByTagName("vm-control");/*sdfsd.querySelector('[aria-label="Playback"]');*/

	//		$(sdf).click()
	//	}
	//});


	player.addEventListener('vmCurrentSrcChange', event => {
		if (player.duration>=time)
			player.currentTime = time;
		player.play();
	});

	radioGroupQuality.addEventListener('vmCheck', event => {
		const radio = event.target;
		submenuQuality.hint = radio.value + "p";

		time = player.currentTime;
		//const p = document.getElementsByTagName("vm-poster");
		//for (let i = 0; i < p.length; i++) {
		//	p[i].remove();
		//}
		//document.getElementById('videoPlayer').removeAttribute("poster");
		var source = "/api/FileApi/GetVideo?url=@Model.Video.Url&quality=" + radio.value;
		document.getElementById('videoSource').setAttribute("data-src", source);
		player.play();
		player.autoplay = true;
		player.currentTime = time;
	});

	radioGroupSpeed.addEventListener('vmCheck', event => {
		const radio = event.target;
		submenuSpeed.hint = radio.value;
		player.playbackRate = radio.value;
	});
	
</script>